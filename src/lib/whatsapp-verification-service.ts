import { BaileysService } from './baileys-service'
import { db } from './db'

/**
 * Servicio de Verificaci√≥n por WhatsApp
 * Genera y env√≠a c√≥digos de verificaci√≥n de 6 d√≠gitos
 */
export class WhatsAppVerificationService {
  /**
   * Generar c√≥digo de verificaci√≥n de 6 d√≠gitos
   */
  static generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString()
  }

  /**
   * Enviar c√≥digo de verificaci√≥n por WhatsApp
   */
  static async sendVerificationCode(phone: string, code: string, name?: string): Promise<boolean> {
    try {
      // Formatear n√∫mero de tel√©fono (asegurar que tenga formato internacional)
      const formattedPhone = phone.startsWith('+') ? phone.slice(1) : phone
      const whatsappNumber = `${formattedPhone}@s.whatsapp.net`

      // Mensaje de verificaci√≥n
      const message = `üîê *C√≥digo de Verificaci√≥n*\n\n${name ? `Hola ${name},\n\n` : ''}Tu c√≥digo de verificaci√≥n es:\n\n*${code}*\n\nEste c√≥digo expira en 5 minutos.\n\n_No compartas este c√≥digo con nadie._`

      // Enviar mensaje por WhatsApp
      await BaileysService.sendMessage(whatsappNumber, message)

      console.log(`‚úÖ C√≥digo de verificaci√≥n enviado a ${phone}`)
      return true
    } catch (error) {
      console.error('‚ùå Error enviando c√≥digo de verificaci√≥n:', error)
      return false
    }
  }

  /**
   * Guardar c√≥digo de verificaci√≥n en la base de datos
   */
  static async saveVerificationCode(userId: string, code: string): Promise<void> {
    const expiresAt = new Date()
    expiresAt.setMinutes(expiresAt.getMinutes() + 5) // Expira en 5 minutos

    await db.user.update({
      where: { id: userId },
      data: {
        phoneVerificationCode: code,
        phoneVerificationExpires: expiresAt,
        isPhoneVerified: false
      }
    })
  }

  /**
   * Verificar c√≥digo ingresado por el usuario
   */
  static async verifyCode(userId: string, code: string): Promise<{ success: boolean; message: string }> {
    try {
      const user = await db.user.findUnique({
        where: { id: userId },
        select: {
          phoneVerificationCode: true,
          phoneVerificationExpires: true,
          isPhoneVerified: true
        }
      })

      if (!user) {
        return { success: false, message: 'Usuario no encontrado' }
      }

      if (user.isPhoneVerified) {
        return { success: true, message: 'Tel√©fono ya verificado' }
      }

      if (!user.phoneVerificationCode) {
        return { success: false, message: 'No hay c√≥digo de verificaci√≥n pendiente' }
      }

      // Verificar si el c√≥digo expir√≥
      if (user.phoneVerificationExpires && user.phoneVerificationExpires < new Date()) {
        return { success: false, message: 'El c√≥digo ha expirado. Solicita uno nuevo.' }
      }

      // Verificar si el c√≥digo coincide
      if (user.phoneVerificationCode !== code) {
        return { success: false, message: 'C√≥digo incorrecto' }
      }

      // Marcar tel√©fono como verificado
      await db.user.update({
        where: { id: userId },
        data: {
          isPhoneVerified: true,
          phoneVerificationCode: null,
          phoneVerificationExpires: null
        }
      })

      return { success: true, message: 'Tel√©fono verificado exitosamente' }
    } catch (error) {
      console.error('Error verificando c√≥digo:', error)
      return { success: false, message: 'Error al verificar el c√≥digo' }
    }
  }

  /**
   * Reenviar c√≥digo de verificaci√≥n
   */
  static async resendCode(userId: string): Promise<{ success: boolean; message: string }> {
    try {
      const user = await db.user.findUnique({
        where: { id: userId },
        select: {
          phone: true,
          name: true,
          isPhoneVerified: true
        }
      })

      if (!user) {
        return { success: false, message: 'Usuario no encontrado' }
      }

      if (user.isPhoneVerified) {
        return { success: false, message: 'Tel√©fono ya verificado' }
      }

      if (!user.phone) {
        return { success: false, message: 'No hay n√∫mero de tel√©fono registrado' }
      }

      // Generar nuevo c√≥digo
      const code = this.generateCode()

      // Guardar en BD
      await this.saveVerificationCode(userId, code)

      // Enviar por WhatsApp
      const sent = await this.sendVerificationCode(user.phone, code, user.name || undefined)

      if (!sent) {
        return { success: false, message: 'Error al enviar el c√≥digo' }
      }

      return { success: true, message: 'C√≥digo reenviado exitosamente' }
    } catch (error) {
      console.error('Error reenviando c√≥digo:', error)
      return { success: false, message: 'Error al reenviar el c√≥digo' }
    }
  }
}

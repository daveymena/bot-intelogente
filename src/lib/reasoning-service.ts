/**
 * üß† SERVICIO DE RAZONAMIENTO PROFUNDO
 * Sistema de an√°lisis paso a paso antes de responder
 * Chain of Thought Reasoning para entender mejor las consultas
 */

import { db } from './db'
import { ProductIntelligenceService } from './product-intelligence-service'
import { ConversationContextService } from './conversation-context-service'

export interface ReasoningStep {
  step: number
  thought: string
  action: string
  result?: any
}

export interface ReasoningResult {
  steps: ReasoningStep[]
  finalIntent: string
  confidence: number
  productFound?: any
  shouldUseAI: boolean
  suggestedResponse?: string
}

export class ReasoningService {
  /**
   * PASO 1: Analizar el mensaje y entender QU√â est√° preguntando
   */
  private static analyzeQuery(message: string): {
    mainIntent: string
    subIntents: string[]
    keywords: string[]
    needsContext: boolean
  } {
    const messageLower = message.toLowerCase()

    // Detectar intenci√≥n principal
    let mainIntent = 'unknown'
    const subIntents: string[] = []
    const keywords: string[] = []
    let needsContext = false

    // INTENCI√ìN: Pedir link/enlace de pago
    if (
      /(?:env√≠a|envia|manda|pasa|dame|quiero|necesito|me das|me pasas|me env√≠as|me mandas)\s*(?:el|la)?\s*(?:link|enlace|url|p√°gina|pagina)/i.test(messageLower) ||
      /(?:link|enlace|url)\s*(?:de|del|para)?\s*(?:pago|compra|comprar)/i.test(messageLower) ||
      /(?:cu√°l|cual)\s*(?:es|ser√≠a)?\s*(?:el|la)?\s*(?:link|enlace|url)/i.test(messageLower) ||
      /^(?:link|enlace|url)$/i.test(messageLower) ||
      /^(?:env√≠a|envia|manda|pasa|dame)\s+(?:el|la)\s+(?:link|enlace|url)$/i.test(messageLower) ||
      /^(?:env√≠ame|enviame|m√°ndame|mandame|p√°same|pasame)\s+(?:el|la)?\s*(?:link|enlace|url)$/i.test(messageLower)
    ) {
      mainIntent = 'request_payment_link'
      subIntents.push('needs_product_context')
      needsContext = true
      keywords.push('link', 'pago', 'enlace')
    }

    // INTENCI√ìN: C√≥mo pagar / m√©todos de pago
    else if (
      /(?:c√≥mo|como)\s*(?:puedo|se|hago para)?\s*(?:pagar|comprar|adquirir)/i.test(messageLower) ||
      /(?:m√©todos|metodos|formas|opciones)\s*(?:de)?\s*(?:pago|compra)/i.test(messageLower) ||
      /(?:qu√©|que)\s*(?:m√©todos|metodos|formas)\s*(?:de pago|aceptan|tienen)/i.test(messageLower)
    ) {
      mainIntent = 'ask_payment_methods'
      subIntents.push('needs_product_context')
      needsContext = true
      keywords.push('pago', 'm√©todos', 'comprar')
    }

    // INTENCI√ìN: Precio
    else if (
      /(?:cu√°nto|cuanto|qu√©|que)\s*(?:cuesta|vale|precio|valor|es el precio)/i.test(messageLower) ||
      /(?:precio|costo)\s*(?:de|del)/i.test(messageLower)
    ) {
      mainIntent = 'ask_price'
      subIntents.push('needs_product_context')
      needsContext = true
      keywords.push('precio', 'cuesta')
    }

    // INTENCI√ìN: Informaci√≥n del producto
    else if (
      /(?:info|informaci√≥n|informacion|detalles|caracter√≠sticas|caracteristicas)\s*(?:de|del|sobre)/i.test(messageLower) ||
      /(?:qu√©|que)\s*(?:es|tiene|incluye|trae)/i.test(messageLower) ||
      /(?:cu√©ntame|cuentame|dime|expl√≠came|explicame)\s*(?:sobre|de|del)/i.test(messageLower)
    ) {
      mainIntent = 'ask_info'
      subIntents.push('needs_product_context')
      needsContext = true
      keywords.push('info', 'detalles')
    }

    // INTENCI√ìN: Comprar
    else if (
      /(?:quiero|deseo|me gustar√≠a|quisiera|voy a)\s*(?:comprar|adquirir|pedir|ordenar)/i.test(messageLower) ||
      /(?:comprar|compra|pedido|orden)/i.test(messageLower)
    ) {
      mainIntent = 'want_to_buy'
      subIntents.push('needs_product_context', 'needs_payment_info')
      needsContext = true
      keywords.push('comprar', 'pedido')
    }

    // INTENCI√ìN: Disponibilidad
    else if (
      /(?:disponible|hay|tienes|tienen|queda|quedan|stock)/i.test(messageLower)
    ) {
      mainIntent = 'ask_availability'
      subIntents.push('needs_product_context')
      needsContext = true
      keywords.push('disponible', 'stock')
    }

    // INTENCI√ìN: Saludo
    else if (
      /^(?:hola|hi|hey|buenos d√≠as|buenas tardes|buenas noches|buenas)$/i.test(messageLower)
    ) {
      mainIntent = 'greeting'
      needsContext = false
    }

    // INTENCI√ìN: Agradecimiento
    else if (
      /^(?:gracias|muchas gracias|ok|vale|perfecto|entendido|listo)$/i.test(messageLower)
    ) {
      mainIntent = 'acknowledgment'
      needsContext = false
    }

    // Detectar si usa pronombres que requieren contexto
    if (
      /^(?:ese|esa|esto|esta|eso|el|la|lo)\s/i.test(messageLower) ||
      /^(?:y|pero|entonces|adem√°s|tambi√©n)\s/i.test(messageLower)
    ) {
      needsContext = true
      subIntents.push('uses_pronouns')
    }

    return {
      mainIntent,
      subIntents,
      keywords,
      needsContext
    }
  }

  /**
   * PASO 2: Buscar el producto mencionado o en contexto
   */
  private static async findRelevantProduct(
    message: string,
    userId: string,
    conversationKey: string,
    conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>
  ): Promise<any | null> {
    // Estrategia 1: Buscar en el mensaje actual
    let product = await ProductIntelligenceService.findProduct(message, userId)

    if (product) {
      console.log(`[Reasoning] ‚úÖ Producto encontrado en mensaje actual: ${product.name}`)
      return product
    }

    // Estrategia 2: Buscar en memoria de contexto
    const context = ConversationContextService.getProductContext(conversationKey)
    if (context) {
      product = await db.product.findUnique({
        where: { id: context.lastProductId }
      })

      if (product) {
        console.log(`[Reasoning] üíæ Producto recuperado de memoria: ${product.name}`)
        return product
      }
    }

    // Estrategia 3: Buscar en historial de conversaci√≥n
    if (conversationHistory.length > 0) {
      console.log(`[Reasoning] üìö Buscando en historial...`)

      // Buscar en los √∫ltimos 5 mensajes del usuario
      for (let i = conversationHistory.length - 1; i >= Math.max(0, conversationHistory.length - 10); i--) {
        const historicalMessage = conversationHistory[i]

        if (historicalMessage.role === 'user') {
          const foundProduct = await ProductIntelligenceService.findProduct(historicalMessage.content, userId)
          if (foundProduct) {
            console.log(`[Reasoning] ‚úÖ Producto encontrado en historial: ${foundProduct.name}`)
            return foundProduct
          }
        }
      }
    }

    console.log(`[Reasoning] ‚ùå No se encontr√≥ producto`)
    return null
  }

  /**
   * PASO 3: Extraer informaci√≥n de pago del producto
   */
  private static extractPaymentInfo(product: any): {
    hasPaymentLinks: boolean
    methods: string[]
    links: any
    isDigital: boolean
    isPhysical: boolean
  } {
    const links = ProductIntelligenceService.extractLinks(product)
    const isDigital = product.category === 'DIGITAL'
    const isPhysical = product.category === 'PHYSICAL'

    const methods: string[] = []

    if (links.buy) methods.push('Hotmart')
    if (links.mercadopago) methods.push('MercadoPago')
    if (links.paypal) methods.push('PayPal')
    if (links.contacto) methods.push('Contacto directo')

    // Productos f√≠sicos siempre tienen contacto directo
    if (isPhysical) {
      methods.push('Contacto directo')
      methods.push('Efectivo')
      methods.push('Transferencia')
      methods.push('Nequi/Daviplata')
    }

    return {
      hasPaymentLinks: methods.length > 0,
      methods,
      links,
      isDigital,
      isPhysical
    }
  }

  /**
   * RAZONAMIENTO COMPLETO: Analizar, buscar, decidir
   */
  static async reason(
    message: string,
    userId: string,
    customerPhone: string,
    conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }> = []
  ): Promise<ReasoningResult> {
    const steps: ReasoningStep[] = []
    const conversationKey = `${userId}:${customerPhone}`

    // PASO 1: Analizar la consulta
    steps.push({
      step: 1,
      thought: 'Analizando el mensaje para entender qu√© est√° preguntando el cliente',
      action: 'Detectar intenci√≥n principal y palabras clave'
    })

    const analysis = this.analyzeQuery(message)

    steps[0].result = {
      intent: analysis.mainIntent,
      subIntents: analysis.subIntents,
      keywords: analysis.keywords,
      needsContext: analysis.needsContext
    }

    console.log(`[Reasoning] Paso 1 - Intenci√≥n detectada: ${analysis.mainIntent}`)
    console.log(`[Reasoning] Necesita contexto: ${analysis.needsContext}`)

    // PASO 2: Buscar producto si es necesario
    let product = null

    if (analysis.needsContext || analysis.subIntents.includes('needs_product_context')) {
      steps.push({
        step: 2,
        thought: 'El cliente pregunta sobre un producto. Necesito identificar cu√°l.',
        action: 'Buscar producto en mensaje actual, memoria o historial'
      })

      product = await this.findRelevantProduct(message, userId, conversationKey, conversationHistory)

      steps[1].result = product ? {
        found: true,
        productName: product.name,
        productId: product.id
      } : {
        found: false,
        reason: 'No se encontr√≥ producto en mensaje, memoria ni historial'
      }

      console.log(`[Reasoning] Paso 2 - Producto: ${product ? product.name : 'No encontrado'}`)
    }

    // PASO 3: Analizar informaci√≥n de pago si pregunta por eso
    let paymentInfo = null

    if (product && (
      analysis.mainIntent === 'request_payment_link' ||
      analysis.mainIntent === 'ask_payment_methods' ||
      analysis.mainIntent === 'want_to_buy'
    )) {
      steps.push({
        step: 3,
        thought: 'El cliente quiere informaci√≥n de pago. Voy a verificar qu√© m√©todos tiene disponibles este producto.',
        action: 'Extraer m√©todos de pago y enlaces del producto'
      })

      paymentInfo = this.extractPaymentInfo(product)

      steps[2].result = {
        hasLinks: paymentInfo.hasPaymentLinks,
        methods: paymentInfo.methods,
        isDigital: paymentInfo.isDigital,
        isPhysical: paymentInfo.isPhysical
      }

      console.log(`[Reasoning] Paso 3 - M√©todos de pago: ${paymentInfo.methods.join(', ')}`)
    }

    // PASO 4: Decidir c√≥mo responder
    steps.push({
      step: steps.length + 1,
      thought: 'Ahora que entiendo la pregunta y tengo la informaci√≥n, voy a decidir c√≥mo responder.',
      action: 'Generar respuesta apropiada'
    })

    let shouldUseAI = true
    let suggestedResponse: string | undefined
    let confidence = 0.7

    // Casos donde podemos responder directamente sin IA
    if (analysis.mainIntent === 'greeting') {
      shouldUseAI = false
      confidence = 0.95
      suggestedResponse = 'üëã Hola ¬°Bienvenido a Tecnovariedades D&S! üòÑüíª\n\nAqu√≠ encontrar√°s tecnolog√≠a, soporte, cursos y herramientas digitales para potenciar tu d√≠a a d√≠a.\n\nüì¶ ¬øBuscas alg√∫n producto, servicio o informaci√≥n en especial?'
    }
    else if (analysis.mainIntent === 'acknowledgment') {
      shouldUseAI = false
      confidence = 0.95
      suggestedResponse = '¬°Perfecto! üëç ¬øHay algo m√°s en lo que pueda ayudarte?'
    }
    else if (analysis.mainIntent === 'request_payment_link' && product && paymentInfo) {
      shouldUseAI = false
      confidence = 0.9
      suggestedResponse = await this.generatePaymentLinkResponse(product, paymentInfo)
    }
    else if (analysis.mainIntent === 'ask_payment_methods' && product && paymentInfo) {
      shouldUseAI = false
      confidence = 0.9
      suggestedResponse = this.generatePaymentMethodsResponse(product, paymentInfo)
    }
    else if (analysis.mainIntent === 'ask_price' && product) {
      shouldUseAI = false
      confidence = 0.9
      suggestedResponse = this.generatePriceResponse(product)
    }
    else if (!product && analysis.needsContext) {
      // No encontr√≥ producto pero lo necesita
      shouldUseAI = true
      confidence = 0.6
      suggestedResponse = undefined // Dejar que la IA maneje esto
    }

    steps[steps.length - 1].result = {
      shouldUseAI,
      confidence,
      hasDirectResponse: !!suggestedResponse
    }

    console.log(`[Reasoning] Paso ${steps.length} - Decisi√≥n: ${shouldUseAI ? 'Usar IA' : 'Respuesta directa'}`)

    return {
      steps,
      finalIntent: analysis.mainIntent,
      confidence,
      productFound: product,
      shouldUseAI,
      suggestedResponse
    }
  }

  /**
   * Generar respuesta de link de pago
   */
  private static async generatePaymentLinkResponse(product: any, paymentInfo: any): Promise<string> {
    const emoji = ProductIntelligenceService.extractProductInfo(product).emoji

    // Productos f√≠sicos
    if (paymentInfo.isPhysical) {
      return `Para adquirir ${product.name} ${emoji}, cont√°ctanos directamente:\n\nüìû WhatsApp: +57 304 274 8687\nüìß deinermen25@gmail.com\nüìç Centro Comercial El Diamante 2, San Nicol√°s, Cali\n\nM√©todos de pago:\n‚úÖ Efectivo\n‚úÖ Transferencia\n‚úÖ Nequi/Daviplata\n‚úÖ Tarjeta de cr√©dito`
    }

    // Productos digitales - Generar links din√°micos
    try {
      const { PaymentLinkGenerator } = await import('./payment-link-generator')
      const paymentLinks = await PaymentLinkGenerator.generatePaymentLinks(product.id)

      if (paymentLinks) {
        return PaymentLinkGenerator.formatForWhatsApp(paymentLinks)
      }
    } catch (error) {
      console.error('[Reasoning] Error generando links:', error)
    }

    // Fallback si no se pueden generar links
    let response = `¬°Perfecto! Aqu√≠ est√°n los m√©todos de pago para ${product.name} ${emoji}\n\nüí∞ Precio: ${product.price.toLocaleString('es-CO')} COP\n\n`

    response += `1Ô∏è‚É£ **NEQUI / DAVIPLATA**\n`
    response += `   üì± N√∫mero: 3136174267\n\n`

    response += `2Ô∏è‚É£ **TRANSFERENCIA BANCARIA**\n`
    response += `   üè¶ Banco: Bancolombia\n`
    response += `   üìã Cuenta: 12345678901\n\n`

    response += `üìû **Soporte:** +57 304 274 8687\n\n`
    response += `¬øCon cu√°l m√©todo deseas pagar?`

    return response
  }

  /**
   * Generar respuesta de m√©todos de pago
   */
  private static generatePaymentMethodsResponse(product: any, paymentInfo: any): string {
    const emoji = ProductIntelligenceService.extractProductInfo(product).emoji

    let response = `Para ${product.name} ${emoji} aceptamos:\n\n`

    if (paymentInfo.isPhysical) {
      response += `‚úÖ Efectivo\n‚úÖ Transferencia bancaria\n‚úÖ Nequi/Daviplata\n‚úÖ Tarjeta de cr√©dito\n\nüìç Ubicaci√≥n:\nCentro Comercial El Diamante 2, San Nicol√°s, Cali\n\nüìû Contacto:\n+57 304 274 8687`
    } else {
      paymentInfo.methods.forEach((method: string) => {
        response += `‚úÖ ${method}\n`
      })

      response += `\nüí∞ Precio: ${product.price.toLocaleString('es-CO')} COP\n\n¬øDeseas el enlace de pago?`
    }

    return response
  }

  /**
   * Generar respuesta de precio
   */
  private static generatePriceResponse(product: any): string {
    const emoji = ProductIntelligenceService.extractProductInfo(product).emoji

    let response = `El ${product.name} cuesta **${product.price.toLocaleString('es-CO')} COP** ${emoji}\n\n`

    if (product.description) {
      const firstLine = product.description.split('\n')[0]
      response += `${firstLine}\n\n`
    }

    response += `¬øDeseas m√°s informaci√≥n o el enlace de compra?`

    return response
  }

  /**
   * Mostrar el proceso de razonamiento (para debugging)
   */
  static formatReasoningSteps(result: ReasoningResult): string {
    let output = 'üß† PROCESO DE RAZONAMIENTO:\n\n'

    result.steps.forEach(step => {
      output += `${step.step}. ${step.thought}\n`
      output += `   Acci√≥n: ${step.action}\n`
      if (step.result) {
        output += `   Resultado: ${JSON.stringify(step.result, null, 2)}\n`
      }
      output += '\n'
    })

    output += `\n‚úÖ DECISI√ìN FINAL:\n`
    output += `- Intenci√≥n: ${result.finalIntent}\n`
    output += `- Confianza: ${(result.confidence * 100).toFixed(0)}%\n`
    output += `- Producto: ${result.productFound ? result.productFound.name : 'No encontrado'}\n`
    output += `- Usar IA: ${result.shouldUseAI ? 'S√≠' : 'No (respuesta directa)'}\n`

    return output
  }
}

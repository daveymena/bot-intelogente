// Smart Sales Bot Pro - Enhanced Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  name                  String?
  phone                 String?
  password              String            // Hashed password
  role                  UserRole          @default(USER)
  membershipType        MembershipType    @default(FREE)
  membershipEnds        DateTime?
  trialEnds             DateTime?         // 7-day trial period
  isActive              Boolean           @default(true)
  isEmailVerified       Boolean           @default(false)
  emailVerificationToken String?
  isPhoneVerified       Boolean           @default(false)
  phoneVerificationCode String?
  phoneVerificationExpires DateTime?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  apiKey                String?           @unique
  whatsappNumber        String?
  businessName          String?
  lastLoginAt           DateTime?
  stripeCustomerId      String?           @unique
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  conversations         Conversation[]
  products              Product[]
  settings              BotSettings?
  aiPrompts             AIPrompt[]
  subscriptions         Subscription[]
  sessions              Session[]
  whatsappConnection    WhatsAppConnection?
  payments              Payment[]
  usageMetrics          UsageMetric[]
  paymentConfig         PaymentConfig?
  
  @@map("users")
}

// Products Management
model Product {
  id            String      @id @default(cuid())
  name          String
  description   String?
  price         Float
  currency      String      @default("COP")
  category      ProductType
  status        ProductStatus @default(AVAILABLE)
  images        String?     // JSON string array of image URLs
  tags          String?     // JSON string array of keywords for auto-response
  autoResponse  String?     // Predefined AI response
  stock         Int?        // null for digital products
  
  // Links de Pago Manuales (Configurables por producto)
  paymentLinkMercadoPago String?
  paymentLinkPayPal      String?
  paymentLinkCustom      String?  // Cualquier otro link (Hotmart, etc.)
  
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  
  @@map("products")
}

// Conversations and Messages
model Conversation {
  id            String           @id @default(cuid())
  customerPhone String
  customerName  String?
  status        ConversationStatus @default(ACTIVE)
  lastMessageAt DateTime         @default(now())
  userId        String
  productId     String?
  
  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product?         @relation(fields: [productId], references: [id])
  messages      Message[]
  
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  type           MessageType  @default(TEXT)
  direction      MessageDirection // INCOMING or OUTGOING
  aiGenerated    Boolean      @default(false)
  confidence     Float?       // AI confidence score
  conversationId String
  createdAt      DateTime     @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// AI Prompts Management
model AIPrompt {
  id          String     @id @default(cuid())
  name        String
  prompt      String
  type        PromptType
  isActive    Boolean    @default(true)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ai_prompts")
}

// Bot Configuration
model BotSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  businessName          String   @default("Tecnovariedades D&S")
  businessPhone         String
  botPersonality        String?  // Custom bot personality prompt
  groqApiKey           String?
  openaiApiKey         String?
  claudeApiKey         String?
  geminiApiKey         String?
  mistralApiKey        String?
  responseDelay        Int      @default(2) // seconds
  autoResponseEnabled  Boolean  @default(true)
  smartWaitingEnabled  Boolean  @default(true)
  maxTokens            Int      @default(500)
  temperature          Float    @default(0.7)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("bot_settings")
}

// User Sessions
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Subscriptions
model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  status            SubscriptionStatus @default(TRIAL)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean           @default(false)
  trialStart        DateTime?
  trialEnd          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// WhatsApp Connection
model WhatsAppConnection {
  id                String              @id @default(cuid())
  userId            String              @unique
  phoneNumber       String              @unique
  status            ConnectionStatus    @default(DISCONNECTED)
  qrCode            String?             // Base64 encoded QR
  qrExpiresAt       DateTime?
  sessionId         String?             // WhatsApp session ID
  lastConnectedAt   DateTime?
  lastMessageAt     DateTime?
  isConnected       Boolean             @default(false)
  webhookUrl        String?
  webhookSecret     String?
  accessToken       String?             // OAuth token
  refreshToken      String?             // For token refresh
  tokenExpiresAt    DateTime?
  connectionAttempts Int                @default(0)
  lastError         String?
  lastErrorAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whatsapp_connections")
}

// Subscription Plans
model SubscriptionPlan {
  id                String              @id @default(cuid())
  name              String
  description       String
  price             Float
  currency          String              @default("USD")
  interval          PlanInterval
  intervalCount     Int                 @default(1)
  stripePriceId     String?             @unique
  features          String              // JSON array of features
  isActive          Boolean             @default(true)
  sortOrder         Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("subscription_plans")
}

// Payment History
model Payment {
  id                String              @id @default(cuid())
  userId            String
  subscriptionId    String?
  stripePaymentId   String?             @unique
  amount            Float
  currency          String              @default("USD")
  status            PaymentStatus        @default(PENDING)
  paymentMethod     String?
  description       String?
  metadata          String?             // JSON metadata
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Payment Configuration (Configurable desde Dashboard)
model PaymentConfig {
  id                    String   @id @default(cuid())
  userId                String   @unique
  
  // MercadoPago
  mercadoPagoEnabled    Boolean  @default(false)
  mercadoPagoPublicKey  String?
  mercadoPagoAccessToken String?
  
  // PayPal
  paypalEnabled         Boolean  @default(false)
  paypalClientId        String?
  paypalClientSecret    String?
  
  // Transferencias Bancarias
  bankTransferEnabled   Boolean  @default(true)
  bankName              String?  @default("Bancolombia")
  bankAccountNumber     String?
  bankAccountType       String?  @default("Ahorros")
  bankAccountHolder     String?
  
  // Nequi
  nequiEnabled          Boolean  @default(true)
  nequiPhone            String?  @default("3136174267")
  
  // Daviplata
  daviplataEnabled      Boolean  @default(true)
  daviplataPhone        String?  @default("3136174267")
  
  // Información de Contacto
  contactPhone          String?  @default("+57 304 274 8687")
  contactEmail          String?  @default("deinermen25@gmail.com")
  contactAddress        String?  @default("Centro Comercial El Diamante 2, San Nicolás, Cali")
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_configs")
}

// Usage Metrics
model UsageMetric {
  id                String              @id @default(cuid())
  userId            String
  metricType        MetricType
  value             Int
  period            String              // e.g., "2024-01", "2024-01-15"
  createdAt         DateTime            @default(now())

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, metricType, period])
  @@map("usage_metrics")
}

// Message Queue (para reconexión automática)
model MessageQueue {
  id            String              @id @default(cuid())
  phoneNumber   String
  message       String
  type          String              @default("text") // text, image, audio
  metadata      String?             // JSON metadata
  status        QueueStatus         @default(PENDING)
  attempts      Int                 @default(0)
  sentAt        DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@map("message_queue")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum MembershipType {
  FREE
  TRIAL
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum ProductType {
  PHYSICAL
  DIGITAL
  SERVICE
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum ConversationStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
}

enum MessageDirection {
  INCOMING
  OUTGOING
}

enum PromptType {
  WELCOME
  PRODUCT_INFO
  PRICING
  SUPPORT
  CLOSING
  CUSTOM
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum ConnectionStatus {
  DISCONNECTED
  CONNECTING
  CONNECTED
  ERROR
  QR_PENDING
  QR_EXPIRED
}

enum PlanInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

enum MetricType {
  MESSAGES_SENT
  MESSAGES_RECEIVED
  CONVERSATIONS
  API_CALLS
  STORAGE_USED
}

enum QueueStatus {
  PENDING
  SENT
  FAILED
}
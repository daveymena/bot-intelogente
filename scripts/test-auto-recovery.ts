/**
 * Script de prueba para el sistema de auto-recuperaci√≥n
 */

import { AutoRecoveryService } from '../src/lib/auto-recovery-service'

async function testAutoRecovery() {
  console.log('üß™ PRUEBA DEL SISTEMA DE AUTO-RECUPERACI√ìN')
  console.log('='.repeat(60))
  console.log('')

  // Test 1: Diagn√≥stico con IA
  console.log('üìã Test 1: Diagn√≥stico de Error con IA')
  console.log('-'.repeat(60))
  try {
    const testError = new Error('ECONNREFUSED: Connection refused at localhost:5432')
    const diagnosis = await AutoRecoveryService.diagnoseError('Database', testError)
    console.log('‚úÖ Diagn√≥stico recibido:')
    console.log(diagnosis)
  } catch (error) {
    console.log('‚ùå Error en diagn√≥stico:', error)
  }
  console.log('')

  // Test 2: Recuperaci√≥n de WhatsApp
  console.log('üìã Test 2: Auto-Recuperaci√≥n de WhatsApp')
  console.log('-'.repeat(60))
  try {
    const result = await AutoRecoveryService.recoverWhatsApp()
    console.log(result ? '‚úÖ WhatsApp recuperado' : '‚ö†Ô∏è  WhatsApp requiere atenci√≥n manual')
  } catch (error) {
    console.log('‚ùå Error:', error)
  }
  console.log('')

  // Test 3: Recuperaci√≥n de Base de Datos
  console.log('üìã Test 3: Auto-Recuperaci√≥n de Base de Datos')
  console.log('-'.repeat(60))
  try {
    const result = await AutoRecoveryService.recoverDatabase()
    console.log(result ? '‚úÖ Base de datos OK' : '‚ö†Ô∏è  Base de datos requiere atenci√≥n')
  } catch (error) {
    console.log('‚ùå Error:', error)
  }
  console.log('')

  // Test 4: Recuperaci√≥n de Pagos
  console.log('üìã Test 4: Auto-Recuperaci√≥n de Pagos')
  console.log('-'.repeat(60))
  try {
    const result = await AutoRecoveryService.recoverPayments()
    console.log(result ? '‚úÖ Sistema de pagos OK' : '‚ö†Ô∏è  Pagos requieren configuraci√≥n')
  } catch (error) {
    console.log('‚ùå Error:', error)
  }
  console.log('')

  // Test 5: Recuperaci√≥n de IA
  console.log('üìã Test 5: Auto-Recuperaci√≥n de IA')
  console.log('-'.repeat(60))
  try {
    const result = await AutoRecoveryService.recoverAI()
    console.log(result ? '‚úÖ IA funcionando' : '‚ö†Ô∏è  IA requiere configuraci√≥n')
  } catch (error) {
    console.log('‚ùå Error:', error)
  }
  console.log('')

  // Test 6: Recuperaci√≥n Completa
  console.log('üìã Test 6: Recuperaci√≥n Completa del Sistema')
  console.log('-'.repeat(60))
  try {
    await AutoRecoveryService.fullSystemRecovery()
  } catch (error) {
    console.log('‚ùå Error:', error)
  }
  console.log('')

  // Test 7: Ver Logs
  console.log('üìã Test 7: Logs de Recuperaci√≥n')
  console.log('-'.repeat(60))
  const logs = AutoRecoveryService.getRecoveryLogs()
  console.log(`üìù Total de logs: ${logs.length}`)
  
  if (logs.length > 0) {
    console.log('\n√öltimos 3 logs:')
    logs.slice(-3).forEach((log, i) => {
      console.log(`\n${i + 1}. ${log.component} - ${log.success ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Timestamp: ${log.timestamp}`)
      console.log(`   Error: ${log.error}`)
      console.log(`   Acci√≥n: ${log.action}`)
    })
  }

  console.log('')
  console.log('='.repeat(60))
  console.log('‚úÖ PRUEBAS COMPLETADAS')
  console.log('='.repeat(60))
}

testAutoRecovery().catch(console.error)

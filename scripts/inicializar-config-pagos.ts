/**
 * üöÄ INICIALIZAR CONFIGURACI√ìN DE PAGOS
 * Crea configuraci√≥n por defecto para usuarios existentes
 */

import { db } from '../src/lib/db'

async function inicializarConfigPagos() {
  console.log('üöÄ INICIALIZANDO CONFIGURACI√ìN DE PAGOS\n')
  
  try {
    // Obtener todos los usuarios
    const users = await db.user.findMany({
      include: { paymentConfig: true }
    })

    console.log(`üìä Usuarios encontrados: ${users.length}\n`)

    for (const user of users) {
      if (user.paymentConfig) {
        console.log(`‚úÖ ${user.email}: Ya tiene configuraci√≥n`)
        continue
      }

      // Crear configuraci√≥n por defecto
      await db.paymentConfig.create({
        data: {
          userId: user.id,
          // Los valores por defecto ya est√°n en el schema
        }
      })

      console.log(`‚ú® ${user.email}: Configuraci√≥n creada`)
    }

    console.log('\n‚úÖ INICIALIZACI√ìN COMPLETADA')
    console.log('\nüìù Los usuarios ahora pueden:')
    console.log('   1. Ir a Dashboard ‚Üí Configuraci√≥n de Pagos')
    console.log('   2. Activar/desactivar m√©todos')
    console.log('   3. Agregar sus credenciales')
    console.log('   4. El bot usar√° autom√°ticamente la configuraci√≥n')

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await db.$disconnect()
  }
}

inicializarConfigPagos()
